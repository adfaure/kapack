# This file was generated by https://github.com/kamilchm/go2nix v1.2.1
# and then modified manually
{ stdenv, buildGoPackage, fetchgit,
  procps, iproute,
  installTestsDeps ? false, python, bats, batsim, batsched, yamldiff,
  installCoverageDeps ? false, gocov, gocovmerge,
  which, findutils, git # needed for patchPhase
}:

buildGoPackage rec {
  name = "batexpe-${version}";
  version = "1.2.0";

  goPackagePath = "framagit.org/batsim/batexpe";

  # to update use:
  # $ nix-prefetch-git url rev
  src = fetchgit {
    rev = "v${version}";
    url = "https://framagit.org/batsim/batexpe.git";
    sha256 = "1mr9g78cmyvz0jnx20fnybqb2pqqhg9vdg0vz1g6c9h43rm800hj";
  };

  buildInputs = [procps iproute which findutils git];

  nativeBuildInputs =
    stdenv.lib.optional installTestsDeps [python bats batsim batsched yamldiff]
    ++ stdenv.lib.optional installCoverageDeps [gocov gocovmerge];

  # FIXME: Not sure that this is really necessary...
  patchPhase = ''
    # Batexpe binaries have runtime dependencies to multiple programs.
    # This patch changes the code so it calls the realpath of the needed
    # program, so that nix can determine this is a runtime dependency.
    # For example, batexpe will run "/nix/store/.../bin/ss" instead of "ss".

    ########
    # bash #
    ########
    find . -type f -maxdepth 1 -name '*.go' \
      -exec sed -i -e "sW\"bash\"W\"$(which bash)\"Wg" {} \;

    #######################
    # "Real" dependencies #
    #######################
    # ps
    find . -type f -maxdepth 1 -name '*.go' \
      -exec sed -i -e "sW\"ps\"W\"$(which ps)\"Wg" {} \;

    # ss
    find . -type f -maxdepth 1 -name '*.go' \
      -exec sed -i -e "sW\"ss\"W\"$(which ss)\"Wg" {} \;

    ####################################
    # File preview and partial reading #
    ####################################
    # wc
    find . -type f -maxdepth 1 -name '*.go' \
      -exec sed -i -e "sW\"wc\"W\"$(which wc)\"Wg" {} \;

    # head
    find . -type f -maxdepth 1 -name '*.go' \
      -exec sed -i -e "sW\"head\"W\"$(which head)\"Wg" {} \;

    # tail
    find . -type f -maxdepth 1 -name '*.go' \
      -exec sed -i -e "sW\"tail\"W\"$(which tail)\"Wg" {} \;
  '';

  /*buildPhase = ''
    export GOPATH=$TMP/go
    cd $TMP/go/src/framagit.org/batsim/batexpe/
    make
  '';*/

  doCheck = false;
  checkPhase = ''
    # retrieve batsim sources
    mkdir .batsrc
    tar -xf ${batsim.src} -C .batsrc
    export BATSIM_DIR=$(realpath .batsrc/*)

    # access to built packages
    export PATH="$PATH:$(realpath ./go/bin)"

    # allow mocking binaries
    export PATH=.:$PATH

    # run the tests
    cd ./go/src/framagit.org/batsim/batexpe/test
    make test
  '';

  goDeps = ./deps.nix;

  meta = {
    description = "set of Go tools around Batsim to simplify experiments";
    longDescription = ''
      It includes:
      - robin: manages the execution of one simulation. It is meant to be as
        robust as possible, as it is the core building block to create experiment
        workflows with Batsim.
      - robintest: is a robin wrapper mainly used to test robin.  robintest
        notably allows to specify what (robin/batsim/scheduler) result is
        expected.
      - the multiple commands are just wrappers around the batexpe library
        (written in Go).  This allows users to build their own tools (in Go) with
        decent code reuse.
    '';
    license = stdenv.lib.licenses.lgpl3;
    maintainers = [ stdenv.lib.maintainers.mickours ];
    meta.platforms = stdenv.lib.platforms.linux;
  };
}
